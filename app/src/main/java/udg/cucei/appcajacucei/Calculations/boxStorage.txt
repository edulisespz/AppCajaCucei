

	class Shape
	{
        int x, y, z;
        public Shape(int a, int b, int c)
        {
            x = a;
            y = b;
            z = c;
        }
	}
	
	class Storage
    {
        int amount;
        int x, y, z;
        int weight;

        public Storage(){}
        public Storage(int a, int b, int c, int d)
        {
            x = a;
            y = b;
            z = c;
            amount = d;
        }
	}
	
	class ListStorage : List<Storage>
    {
        int totalAmount;
        int desiredAmount;
        int style;
        Shape element, box;

        public ListStorage(Shape element, Shape box, int amount)
        {
            totalAmount = 0;
            desiredAmount = amount;
            //storageKind(element, box);
            this.element = element;
            this.box = box;
            style = 0;
        }
        public ListStorage(Shape element, Shape box, int desiredAmount, int totalAmount, int style)
        {
            this.desiredAmount = desiredAmount;
            this.totalAmount = totalAmount;
            this.style = style;
            //storageKind(element, box);
            this.element = element;
            this.box = box;
            
        }
	
		public int storageKind()
        {
            //Storage s;
            int r=-1;
            List<int> completed = new List<int>() ;
            List<ListStorage> posibles = new List<ListStorage>();
            List<int> kinds = new List<int>();
            if (totalAmount >= desiredAmount)
                return 1;
            
            else if (this.style == 0)
            {
                int kindF;
                kinds.Add((box.getX()/element.getX())*(box.getY()/element.getY())*(box.getZ()/element.getZ()));
                kinds.Add((box.getX()/element.getY())*(box.getY()/element.getX())*(box.getZ()/element.getZ()));
                kinds.Add((box.getX()/element.getX())*(box.getY()/element.getZ())*(box.getZ()/element.getY()));
                kinds.Add((box.getX()/element.getZ())*(box.getY()/element.getX())*(box.getZ()/element.getY()));
                kinds.Add((box.getX()/element.getY())*(box.getY()/element.getZ())*(box.getZ()/element.getX()));
                kinds.Add((box.getX()/element.getZ())*(box.getY()/element.getY())*(box.getZ()/element.getX()));
                kindF = kinds.Max();

                if (kindF < 1)
                    return -1;
                /*if (totalAmount >= desiredAmount)
                    completed.Add(1);
                else if (kindF < 1)
                    completed.Add(-1);
                else
                {*/
                if (kinds[0] == kindF)
                {
                    int newX = box.getX() - (element.getX() * (box.getX() / element.getX()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[0] , 0, 1);
                    Storage s = new Storage(element.getX(),element.getY(),element.getZ(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                   totalAmount = kindF; 

                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getY() * (box.getY() / element.getY()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[0], 0, 1);
                    Storage s2 = new Storage(element.getX(), element.getY(), element.getZ(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getZ() * (box.getZ() / element.getZ()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[0], 0, 1);
                    Storage s3 = new Storage(element.getX(), element.getY(), element.getZ(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[1] == kindF)
                {
                    int newX = box.getX() - (element.getY() * (box.getX() / element.getY()));
                    int newY = box.getY();// - (element.getY() * (box.getY() / element.getY()));
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[1], 0, 1);
                    Storage s = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getX() * (box.getY() / element.getX()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[1], 0, 1);
                    Storage s2 = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getZ() * (box.getZ() / element.getZ()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[1], 0, 1);
                    Storage s3 = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[2] == kindF)
                {
                    int newX = box.getX() - (element.getX() * (box.getX() / element.getX()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[2], 0, 2);
                    Storage s = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getZ() * (box.getY() / element.getZ()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[2], 0, 2);
                    Storage s2 = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getY() * (box.getZ() / element.getY()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[2], 0, 2);
                    Storage s3 = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[3] == kindF)
                {
                    int newX = box.getX() - (element.getZ() * (box.getX() / element.getZ()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[3], 0, 2);
                    Storage s = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getX() * (box.getY() / element.getX()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[3], 0, 2);
                    Storage s2 = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getY() * (box.getZ() / element.getY()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[3], 0, 2);
                    Storage s3 = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[4] == kindF)
                {
                    int newX = box.getX() - (element.getY() * (box.getX() / element.getY()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[4], 0, 3);
                    Storage s = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getZ() * (box.getY() / element.getZ()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[4], 0, 3);
                    Storage s2 = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getX() * (box.getZ() / element.getX()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[4], 0, 3);
                    Storage s3 = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[5] == kindF)
                {
                    int newX = box.getX() - (element.getZ() * (box.getX() / element.getZ()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[5], 0, 3);
                    Storage s = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getY() * (box.getY() / element.getY()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[5], 0, 3);
                    Storage s2 = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getX() * (box.getZ() / element.getX()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[5], 0, 3);
                    Storage s3 = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }   
            }
            else if (this.style == 1)
            {
                int kindF;
                kinds.Add((box.getX() / element.getX()) * (box.getY() / element.getY()) * (box.getZ() / element.getZ()));
                kinds.Add((box.getX() / element.getY()) * (box.getY() / element.getX()) * (box.getZ() / element.getZ()));
                kindF = kinds.Max();

                if (kindF < 1)
                    return -1;

                if (kinds[0] == kindF)
                {
                    int newX = box.getX() - (element.getX() * (box.getX() / element.getX()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[0], 0, 1);
                    Storage s = new Storage(element.getX(), element.getY(), element.getZ(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getY() * (box.getY() / element.getY()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[0], 0, 1);
                    Storage s2 = new Storage(element.getX(), element.getY(), element.getZ(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getZ() * (box.getZ() / element.getZ()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[0], 0, 1);
                    Storage s3 = new Storage(element.getX(), element.getY(), element.getZ(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[1] == kindF)
                {
                    int newX = box.getX() - (element.getY() * (box.getX() / element.getY()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[1], 0, 1);
                    Storage s = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getX() * (box.getY() / element.getX()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[1], 0, 1);
                    Storage s2 = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getZ() * (box.getZ() / element.getZ()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[1], 0, 1);
                    Storage s3 = new Storage(element.getY(), element.getX(), element.getZ(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF; 
                    posibles.Add(p3);
                }
            }
            else if (this.style == 2)
            {
                int kindF;
                kinds.Add((box.getX() / element.getX()) * (box.getY() / element.getZ()) * (box.getZ() / element.getY()));
                kinds.Add((box.getX() / element.getZ()) * (box.getY() / element.getX()) * (box.getZ() / element.getY()));
                kindF = kinds.Max();

                if (kindF < 1)
                    return -1;

                if (kinds[0] == kindF)
                {
                    int newX = box.getX() - (element.getX() * (box.getX() / element.getX()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[0], 0, 2);
                    Storage s = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getZ() * (box.getY() / element.getZ()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[0], 0, 2);
                    Storage s2 = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getY() * (box.getZ() / element.getY()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[0], 0, 2);
                    Storage s3 = new Storage(element.getX(), element.getZ(), element.getY(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[1] == kindF)
                {
                    int newX = box.getX() - (element.getZ() * (box.getX() / element.getZ()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[1], 0, 2);
                    Storage s = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getX() * (box.getY() / element.getX()));// - (element.getY() * (box.getY() / element.getY()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[1], 0, 2);
                    Storage s2 = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getY() * (box.getZ() / element.getY()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[1], 0, 2);
                    Storage s3 = new Storage(element.getZ(), element.getX(), element.getY(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                
            }
            else if (this.style == 3)
            {
                int kindF;
                kinds.Add((box.getX() / element.getY()) * (box.getY() / element.getZ()) * (box.getZ() / element.getX()));
                kinds.Add((box.getX() / element.getZ()) * (box.getY() / element.getY()) * (box.getZ() / element.getX()));
                kindF = kinds.Max();

                if (kindF < 1)
                    return -1;

                if (kinds[0] == kindF)
                {
                    int newX = box.getX() - (element.getY() * (box.getX() / element.getY()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[0], 0, 3);
                    Storage s = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getZ() * (box.getY() / element.getZ()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[0], 0, 3);
                    Storage s2 = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getX() * (box.getZ() / element.getX()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[0], 0, 3);
                    Storage s3 = new Storage(element.getY(), element.getZ(), element.getX(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }
                if (kinds[1] == kindF)
                {
                    int newX = box.getX() - (element.getZ() * (box.getX() / element.getZ()));
                    int newY = box.getY();
                    int newZ = box.getZ();
                    Shape newBox = new Shape(newX, newY, newZ);
                    ListStorage p = new ListStorage(element, newBox, desiredAmount - kinds[1], 0, 3);
                    Storage s = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p.Add(s);
                    completed.Add(p.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p);


                    int newX2 = box.getX();
                    int newY2 = box.getY() - (element.getY() * (box.getY() / element.getY()));
                    int newZ2 = box.getZ();
                    Shape newBox2 = new Shape(newX2, newY2, newZ2);
                    ListStorage p2 = new ListStorage(element, newBox2, desiredAmount - kinds[1], 0, 3);
                    Storage s2 = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p2.Add(s2);
                    completed.Add(p2.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p2);


                    int newX3 = box.getX();
                    int newY3 = box.getY();
                    int newZ3 = box.getZ() - (element.getX() * (box.getZ() / element.getX()));
                    Shape newBox3 = new Shape(newX3, newY3, newZ3);
                    ListStorage p3 = new ListStorage(element, newBox3, desiredAmount - kinds[1], 0, 3);
                    Storage s3 = new Storage(element.getZ(), element.getY(), element.getX(), kindF);
                    p3.Add(s3);
                    completed.Add(p3.storageKind());
                    totalAmount = kindF;
                    posibles.Add(p3);
                }   

            }
            int i = 0;
            int max = 0;
            int indMax = -1;
            
            foreach (ListStorage p in posibles)
            {
                if (completed[i] == 1 && p.totalAmount>=max)
                {
                    max = p.totalAmount;
                    indMax = i;
                    r = 1;
                }
                i++;
            }
            if (indMax != -1)
            {
                this.AddRange(posibles[indMax]);
                totalAmount += max;
                return completed[indMax];
            }
            else
                return -1;
            
        }
    }
	
	
	
	en main:
	
		ListStorage l = new ListStorage(element, box, elements2store);

            if (l.storageKind() == 1)
            {
                imprime("espacio suficiente: ");
                foreach (Storage s in l)
                {
                    imprime("    acomoda " + s.getAmount() + " objetos de la forma x=" + s.getX() + " y=" + s.getY() + " z=" + s.getZ());
                }
            }

            else
            {
                int e = (elements2store-1) / l.getTotalAmount()+1;
                imprime("espacio insuficiente, necesitas " +  e + " cajas");
            }
            imprime(l.getTotalAmount() + " elementos acomodados");